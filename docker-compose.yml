
version: '3.8'
services:

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - weblyft

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - weblyft

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - weblyft

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse
    ports:
      - 8123:8123
      - 9009:9009
    volumes:
      - clickhouse-data:/var/lib/clickhouse
    networks:
      - weblyft

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: weblyft_user
      POSTGRES_PASSWORD: weblyft_password
      POSTGRES_DB: weblyft
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - weblyft
      
  # api-server:
  #   build: ./api-server
  #   container_name: api-server
  #   depends_on:
  #     - kafka
  #     - clickhouse
  #   ports:
  #     - 5000:5000
  #   volumes:
  #     - .:/app/api-server
  #   networks:
  #     - weblyft
  #   env_file:
  #     - ./src/api-server/.env

  # docker-mgr:
  #   build: ./docker-mgr
  #   container_name: docker-mgr
  #   ports:
  #     - 9000:9000
  #   volumes:
  #     - .:/app/docker-mgr
  #   networks:
  #     - weblyft
  #   env_file:
  #     - ./src/docker-mgr/.env

  # reverse-proxy:
  #   build: ./reverse-proxy
  #   container_name: reverse-proxy
  #   ports:
  #     - 8080:8080
  #   volumes:
  #     - .:/app/reverse-proxy
  #   networks:
  #     - weblyft
  #   env_file:
  #     - ./src/reverse-proxy/.env

networks:
  weblyft:
    driver: bridge

volumes:
  # public:
  rabbitmq-data:
  clickhouse-data:
  postgres_data:
      driver: local